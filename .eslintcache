[{"C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\App.js":"1","C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\Home\\index.js":"2","C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\ContactHistory\\index.js":"3","C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\index.js":"4","C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\RegisterNewUser\\index.js":"5","C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\AdminLogin\\index.js":"6","C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\Users\\index.js":"7","C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\redux\\actions.js":"8"},{"size":319,"mtime":1662887663223,"results":"9","hashOfConfig":"10"},{"size":5366,"mtime":1662889899304,"results":"11","hashOfConfig":"10"},{"size":8079,"mtime":1662892320698,"results":"12","hashOfConfig":"10"},{"size":409,"mtime":1662887663223,"results":"13","hashOfConfig":"10"},{"size":4945,"mtime":1662887663226,"results":"14","hashOfConfig":"10"},{"size":1849,"mtime":1662887663224,"results":"15","hashOfConfig":"10"},{"size":8306,"mtime":1662887663227,"results":"16","hashOfConfig":"10"},{"size":372,"mtime":1662887663229,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"48g0nv",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\App.js",[],"C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\Home\\index.js",[],["36","37"],"C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\ContactHistory\\index.js",[],"C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\index.js",[],"C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\RegisterNewUser\\index.js",["38"],"C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\AdminLogin\\index.js",[],"C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\pages\\Users\\index.js",["39"],"import React, { useEffect, useState } from 'react';\r\nimport {\r\n    Box,\r\n    makeStyles,\r\n    Typography,\r\n    Paper,\r\n    TableContainer,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    TablePagination,\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions\r\n} from '@material-ui/core'\r\nimport RegisterNewUser from '../RegisterNewUser';\r\nimport { QRCode } from 'react-qr-svg';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst Users = () => {\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [users, setUsers] = useState([]);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [isShowQRDialog, setShowQRDialog] = useState(false);\r\n    const [selectedUser, setSelectedUser] = useState(null);\r\n\r\n    const columns = [\r\n        { id: 'no', label: 'No', minWidth: 60 },\r\n        { id: 'name', label: 'Name', minWidth: 170 },\r\n        { id: 'nrc', label: 'NRC', minWidth: 100 },\r\n        { id: 'phone', label: 'Phone', minWidth: 100 },\r\n        { id: 'address', label: 'Address', minWidth: 160 },\r\n        { id: 'createdAt', label: 'CreatedAt', minWidth: 100 }\r\n    ];\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const showQRCode = (user) => {\r\n        setSelectedUser(user);\r\n        setShowQRDialog(true)\r\n    }\r\n\r\n    const renderQRDialog = () => {\r\n        const user = selectedUser;\r\n        return (user &&\r\n            <Dialog\r\n                open={isShowQRDialog}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                onClose={() => setShowQRDialog(false)}\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n                <DialogContent dividers style={{ marginRight: 30, marginLeft: 30 }}>\r\n                    <Typography variant='h6'> Capture QR Code </Typography>\r\n                    <Typography variant=\"subtitle1\">Name : {user.name}</Typography>\r\n                    <QRCode\r\n                        id=\"QRCode\"\r\n                        level=\"Q\"\r\n                        style={{ width: 256, marginTop: 5 }}\r\n                        value={JSON.stringify({\r\n                            id: user.id,\r\n                            name: user.name,\r\n                            nrc: user.nrc,\r\n                            phone: user.phone,\r\n                            address: user.address\r\n                        })}\r\n                        includeMargin={true}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => setShowQRDialog(false)} color=\"primary\">Close</Button>\r\n                </DialogActions>\r\n            </Dialog>)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:4000/api/user', {\r\n            method: \"GET\"\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const userArr = [];\r\n                data.data.forEach(\r\n                    (userData, index) => userArr.push(\r\n                        {\r\n                            id: userData.id,\r\n                            no: index + 1,\r\n                            name: userData.name,\r\n                            nrc: userData.nrc,\r\n                            phone: userData.phone,\r\n                            address: userData.address,\r\n                            createdAt: new Date(userData.created_at).toLocaleString()\r\n                        }\r\n                    )\r\n                )\r\n                setUsers(userArr);\r\n                return data;\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                return error;\r\n            });\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Box className={classes.body}>\r\n                <Box className={classes.topBox}>\r\n                    <Typography variant='h5' color='primary'> All Users </Typography>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => setOpenDialog(true)}>Add New User</Button>\r\n                </Box>\r\n                <Paper className={classes.tableRoot}>\r\n                    <TableContainer className={classes.tableContainer}>\r\n                        <Table stickyHeader aria-label=\"sticky table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    {columns.map((column) => (\r\n                                        <TableCell\r\n                                            key={column.id}\r\n                                            align={column.align}\r\n                                            style={{ minWidth: column.minWidth }}\r\n                                        >\r\n                                            {column.label}\r\n                                        </TableCell>\r\n                                    ))}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    users?.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                                        return (\r\n                                            <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                                {\r\n                                                    columns.map((column) => {\r\n                                                        const value = row[column.id];\r\n                                                        return (\r\n                                                            <TableCell key={column.id} align={column.align} onClick={() => showQRCode(row)}>\r\n                                                                {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                                            </TableCell>\r\n                                                        );\r\n                                                    })\r\n                                                }\r\n                                            </TableRow>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[10, 25, 100]}\r\n                        component=\"div\"\r\n                        count={users.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            </Box>\r\n            <RegisterNewUser openDialog={openDialog} closeDialog={() => setOpenDialog(false)} />\r\n            {renderQRDialog()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;\r\n\r\nconst useStyles = makeStyles({\r\n    container: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        alignContent: 'center'\r\n    },\r\n    body: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 15\r\n    },\r\n    topBox: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flex: 1,\r\n        width: '100%',\r\n        justifyContent: 'space-between'\r\n    },\r\n    tableHead: {\r\n        background: 'primary',\r\n        backgroundColor: 'primary'\r\n    },\r\n    tableRoot: {\r\n        marginTop: 15,\r\n        width: '100%',\r\n    },\r\n    tableContainer: {\r\n        maxHeight: 590,\r\n    },\r\n});\r\n","C:\\Users\\TTNGAMINGPC\\Desktop\\contact-tracking-system\\src\\redux\\actions.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":26},{"ruleId":"44","severity":1,"message":"48","line":16,"column":5,"nodeType":"46","messageId":"47","endLine":16,"endColumn":16},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'DialogTitle' is defined but never used.","no-global-assign","no-unsafe-negation"]